<h1><%= t "devise.invitations.new.header" %></h1>

<% if Flipper.enabled?(:new_permissions_system_aug_2020, current_admin) %>
  <div class="row">
    <div class="col-md-6">
      <%= bootstrap_form_with(url: email_authentication_invitation_path, local: true, autocomplete: "off", label_errors: true) do |form| %>
        <%= form.text_field :full_name, id: :full_name, required: true, autocomplete: "off", label: "Full Name *" %>
        <%= form.text_field :email, id: :email, required: true %>
        <%= form.text_field :job_title, id: :job_title, required: true %>
        <%= form.select :access_levels, User::ACCESS_LEVEL_DESCRIPTIONS, id: :access_levels, required: true %>

        <div id="facility-access">
          <% @current_admin.access_tree[:organizations].each do |organization, children| %>
            <ul>
              <li>
                <%= form.check_box :organization, id: organization.id, class: 'access-input', label: "#{organization.name} (#{children[:access_count]} / #{children[:total_count]})" %>
                <ul>
                  <% children[:facility_groups].each do |facility_group, children| %>
                    <li>
                      <%= form.check_box :facility_group, id: facility_group.id, class: 'access-input', label: "#{facility_group.name} (#{children[:access_count]} / #{children[:total_count]})" %>
                      <ul>
                        <% children[:facilities].each do |facility, _| %>
                          <li>
                            <%= form.check_box :facility, id: facility.id, class: 'access-input', label: facility.name %>
                          </li>
                        <% end %>
                      </ul>

                    </li>
                  <% end %>
                </ul>
              </li>
            </ul>
          <% end %>
        </div>

        <%= form.primary("Send Invite") %>
      <% end %>
    </div>
  </div>
<% else %>
  <%= react_component "InviteAdminForm",
      organizations: policy_scope([:manage, :admin, Organization.all]),
      facility_groups: policy_scope([:manage, :admin, FacilityGroup.all]).order(:name),
      facilities: policy_scope([:manage, :admin, Facility.all]).pluck(:id, :name),
      permissions: policy([:manage, :admin, User]).allowed_permissions,
      access_levels: policy([:manage, :admin, User]).allowed_access_levels,
      submit_route: '/email_authentications/invitation',
      allow_email_edit: true,
      submit_text: 'Invite Admin',
      submit_method: 'POST' %>
<% end %>
